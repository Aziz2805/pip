import dash
from dash import Dash, dcc, html, Input, Output, callback
import dash_bootstrap_components as dbc
import plotly.express as px
import plotly.graph_objs as go
import plotly.graph_objects as go
import pandas as pd
import numpy as np

from utils.pretraitement import (
    load_data_commerces,
    load_PVD_infos,
    load_data_commerces_typesCleaned,
)


dash.register_page(__name__, path='/commerces', order = 4, display_name = "üõçÔ∏è Commerce")


# ========= 1) Chargement des donn√©es =============

df_com = load_data_commerces()
df_ville = load_PVD_infos()
da_com = load_data_commerces_typesCleaned()

ville_com = pd.merge(df_ville, df_com, left_on="insee_com", right_on="com_insee") # jointure commerce et pvd
villa_com = pd.merge(df_ville, da_com, left_on="insee_com", right_on="com_insee") # jointure commerce et pvd avec types regroup√© 

# convertit les dates si n√©cessaire
if "date_signature" in ville_com.columns:
    ville_com["date_signature"] = pd.to_datetime(ville_com["date_signature"], errors="coerce")



# ========== 3) Cr√©ation des onglets (Tabs) ========



tabs = dcc.Tabs(
    id="main-tabs",
    value="kpi",  # onglet par d√©faut
    children=[
        dcc.Tab(label="PVD", value="kpi",),
        dcc.Tab(label="Commerces", value="commerces"),
        dcc.Tab(label="D√©partements", value="departements"),
        dcc.Tab(label="Explorer", value="explorer"),
        dcc.Tab(label="Comparatif Communes", value="comparative_communes"),
        dcc.Tab(label="√Ä propos", value="about"),
    ]
)

# Un conteneur pour le contenu dynamique des onglets
content = html.Div(id="tab-content")


# ========== 4) Layout global ======================
layout = html.Div([
    dbc.Container(fluid=True, children=[
        dbc.Row([
            dbc.Col(html.H1("Commerce")),
            html.Div(
                style={'height': '10px', 'background-color': '#4CAF50', 'margin-bottom': '10px', 'margin-top': '10px'}
            )
        ]),
        dbc.Row([
            dbc.Col(tabs, width=12)
        ]),
        dbc.Row([
            dbc.Col(content, width=12)
        ])
    ])
])



# ========== 5) G√©n√©rer le layout par onglet =======
def render_tab_content(tab):
    """
    Fonction qui retourne le layout Dash correspondant √† la valeur de l'onglet s√©lectionn√©
    (similaire √† la logique tabItem(...) dans Shiny).
    """
    if tab == "kpi": 
        return dbc.Container([
            # Premi√®re rang√©e de "valueBox"
            dbc.Row([
                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("Total des commerces", className="card-title"),
                        html.H2(id="total_commerces", className="card-text")
                    ])
                ], color="primary", inverse=True), width=3),

                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("Type dominant", className="card-title"),
                        html.H2(id="dominant_type", className="card-text")
                    ])
                ], color="success", inverse=True), width=3),

                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("R√©gion la plus active", className="card-title"),
                        html.H2(id="top_region", className="card-text")
                    ])
                ], color="dark", inverse=True), width=3),

                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("D√©partement le plus actif", className="card-title"),
                        html.H2(id="top_departement", className="card-text")
                    ])
                ], color="warning", inverse=True), width=3),
            ]),

            # Deuxi√®me rang√©e de "valueBox"
            dbc.Row([
                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("P√©riode la plus active (2020-2024)", className="card-title"),
                        html.H2(id="period_2020_2024", className="card-text")
                    ])
                ], color="secondary", inverse=True), width=3),

                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("Nombre de d√©partements", className="card-title"),
                        html.H2(id="total_departements", className="card-text")
                    ])
                ], color="info", inverse=True), width=3),

                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("Nombre de r√©gions", className="card-title"),
                        html.H2(id="total_regions", className="card-text")
                    ])
                ], color="danger", inverse=True), width=3),

                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("Nombre de communes", className="card-title"),
                        html.H2(id="total_communes", className="card-text")
                    ])
                ], color="purple", inverse=True), width=3),

                dbc.Col(dbc.Card([
                    dbc.CardBody([
                        html.H4("Commune la plus active", className="card-title"),
                        html.H2(id="top_commune", className="card-text")
                    ])
                ], color="pink", inverse=True), width=3),
            ]),
        ], fluid=True)

    elif tab == "commerces":
        return dbc.Container([
            dbc.Row([
                dbc.Col(dcc.Graph(id="hist_types"), width=12),
                
            ]),
            dbc.Row([
                dbc.Col(dcc.Graph(id="top_10_commerces"), width=6),
                dbc.Col(dcc.Graph(id="trend_commerces"), width=6),
            ])
        ], fluid=True)

    elif tab == "departements":
        return dbc.Container([
            dbc.Row([
                dbc.Col(
                    dcc.Dropdown(
                        id="selected_dept",
                        options=[{"label": d, "value": d} for d in sorted(villa_com["Nom Officiel D√©partement"].unique())],
                        value=sorted(villa_com["Nom Officiel D√©partement"].unique())[0],
                        placeholder="Choisir un d√©partement",
                    ), width=6
                ),
                dbc.Col(dcc.Graph(id="concentration_dept"), width=12),
            ]),
            dbc.Row([
                dbc.Col(dcc.Graph(id="repartition_types_dept"), width=12),
            ])
        ], fluid=True)

    elif tab == "explorer": 
        return dbc.Container([
        html.H3("Explorer les commerces par r√©gion, d√©partement et commune"),
        dbc.Row([
            dbc.Col(
                dcc.Dropdown(
                    id="explore_region",
                    options=[{"label": r, "value": r} for r in sorted(ville_com["Nom Officiel R√©gion"].unique())],
                    value=sorted(ville_com["Nom Officiel R√©gion"].unique())[0],
                    placeholder="Choisir une r√©gion"
                ), width=4
            ),
            dbc.Col(
                dcc.Dropdown(id="explore_dept", placeholder="Choisir un d√©partement"),
                width=4
            ),
            dbc.Col(
                dcc.Dropdown(id="explore_commune", placeholder="Choisir une commune"),
                width=4
            ),
        ]),
        dbc.Row([
             dbc.Col(dcc.Graph(id="explore_map"), width=12),
            
        ]),
        dbc.Row([
            dbc.Col(dcc.Graph(id="explore_commerce_distribution"), width=6),
            dbc.Col(dcc.Graph(id="explore_top_types"), width=6),
            
        ]),
        dbc.Row([
            dbc.Col(dcc.Graph(id="explore_category_distribution"), width=6),
            dbc.Col(dcc.Graph(id="diversity_commune"), width=6),
        ])
    ], fluid=True)

    elif tab == "comparative_communes":
        return dbc.Container([
            dbc.Row([
                dbc.Col(
                    dcc.Dropdown(
                        id="compare_commune1",
                        options=[{"label": c, "value": c} for c in sorted(ville_com["com_nom"].unique())],
                        value=sorted(ville_com["com_nom"].unique())[0],
                        placeholder="Commune 1"
                    ), width=6
                ),
                dbc.Col(
                    dcc.Dropdown(
                        id="compare_commune2",
                        options=[{"label": c, "value": c} for c in sorted(df_com["com_nom"].unique())],
                        value=sorted(df_com["com_nom"].unique())[1],
                        placeholder="Commune 2"
                    ), width=6
                ),
            ]),
            dbc.Row([
                dbc.Col(dcc.Graph(id="commune_comparison_chart"), width=12)
            ]),
            dbc.Row([
                dbc.Col(dcc.Graph(id="commune1_wordcloud"), width=6),
                dbc.Col(dcc.Graph(id="commune2_wordcloud"), width=6),
            ]),
            dbc.Row([
                dbc.Col(dcc.Graph(id="commune1_div"), width=6),
                dbc.Col(dcc.Graph(id="commune2_div"), width=6),
            ]),
            dbc.Row([
                dbc.Col(dcc.Graph(id="commune1_chaine"), width=6),
                dbc.Col(dcc.Graph(id="commune2_chaine"), width=6),
            ])
        ], fluid=True)

    elif tab == "about":
        return dbc.Container([
            html.H3("Description du tableau de bord"),
            html.P("Ce tableau de bord pr√©sente des analyses sur les types de commerces dans l'ensemble des Petites Villes de Demain (PVD)."),
            html.P("Les principales fonctionnalit√©s comprennent la r√©partition des types de commerces par commune (PVD) et par d√©partement, ainsi qu'une comparaison entre communes selon les types de commerces."),
            html.P("Le but est de permettre une exploration interactive des donn√©es, offrant aux utilisateurs une meilleure compr√©hension des dynamiques commerciales locales et des sp√©cificit√©s territoriales."),
            html.P("Des visualisations intuitives et des outils de filtrage facilitent l'identification des tendances, aidant ainsi les d√©cideurs locaux √† orienter leurs strat√©gies."),

        ], fluid=True)
    
    
    return html.Div() # Si aucun onglet ne correspond, on renvoie un contenu vide


# ========== 6) Callback pour mettre √† jour le layout de chaque onglet ==========

@app.callback(
    Output("tab-content", "children"),
    Input("main-tabs", "value")
)
def update_tab_content(selected_tab):
    return render_tab_content(selected_tab)

# ========== 7) Callbacks pour les PVD (onglet "kpi") ===========================
@app.callback(
    Output("total_regions", "children"),
    Output("total_departements", "children"),
    Output("total_communes", "children"),
    Output("total_commerces", "children"),
    Output("dominant_type", "children"),
    Output("top_commune", "children"),
    Output("top_departement", "children"),
    Output("top_region", "children"),
    Output("period_2020_2024", "children"),
    Input("main-tabs", "value")  # Utilisation de l'onglet pour ‚Äúd√©clencher‚Äù la mise √† jour
)
def update_kpi_values(tab):
    """
    Met √† jour les indicateurs cl√©s de performance (KPI).
    """
    if tab != "kpi":
        # Si on n'est pas sur l'onglet KPI, renvoyer des cha√Ænes vides
        return [""] * 9

    df = ville_com.copy()

    # 1) Total des r√©gions
    if "Nom Officiel R√©gion" in df.columns:
        total_regions = df["Nom Officiel R√©gion"].nunique()
    else:
        total_regions = 0

    # 2) Total des d√©partements
    if "Nom Officiel D√©partement" in df.columns:
        total_departements = df["Nom Officiel D√©partement"].nunique()
    else:
        total_departements = 0

    # 3) Total des communes
    if "lib_com" in df.columns:
        total_communes = df["lib_com"].nunique()
    else:
        total_communes = 0

    # 4) Total des commerces
    total_commerces = len(df)

    # 5) Type dominant
    if "type" in df.columns and not df.empty:
        dominant_type = df["type"].value_counts().idxmax()
    else:
        dominant_type = "N/A"

    # 6) Commune avec le plus de commerces
    if "lib_com" in df.columns and not df.empty:
        top_commune = df["lib_com"].value_counts().idxmax()
    else:
        top_commune = "N/A"

    # 7) D√©partement avec le plus de commerces
    if "Nom Officiel D√©partement" in df.columns and not df.empty:
        top_departement = df["Nom Officiel D√©partement"].value_counts().idxmax()
    else:
        top_departement = "N/A"

    # 8) R√©gion avec le plus de commerces
    if "Nom Officiel R√©gion" in df.columns and not df.empty:
        top_region = df["Nom Officiel R√©gion"].value_counts().idxmax()
    else:
        top_region = "N/A"

    # 9) P√©riode la plus active (2020-2024)
    if "date_signature" in df.columns:
        df_2020_2024 = df[
            (df["date_signature"].dt.year >= 2020) &
            (df["date_signature"].dt.year <= 2024)
        ]
        if not df_2020_2024.empty:
            active_period = int(df_2020_2024["date_signature"].dt.year.value_counts().idxmax())
        else:
            active_period = "N/A"
    else:
        active_period = "N/A"

    return (
        str(total_regions),      # 1
        str(total_departements), # 2
        str(total_communes),     # 3
        str(total_commerces),    # 4
        str(dominant_type),      # 5
        str(top_commune),        # 6
        str(top_departement),    # 7
        str(top_region),         # 8
        str(active_period),      # 9
)



# ========== 8) Callbacks pour l‚Äôonglet "commerces" =========================

@app.callback(
    Output("hist_types", "figure"),
    Output("trend_commerces", "figure"),
    Output("top_10_commerces", "figure"),
    Input("main-tabs", "value")
)
def update_commerces_charts(tab):
    """
    Regroupe les 3 graphiques de l'onglet "Commerces" dans un seul callback.
    """
    if tab != "commerces":
        return go.Figure(), go.Figure(), go.Figure()

    df = ville_com.copy()

   # diagramme des types
    df_type_count = df["type"].value_counts().reset_index()
    df_type_count.columns = ["type", "count"]  # Adapter le nom de la colonne correctement

    fig_treemap = px.treemap(
    df_type_count,
    path=["type"],
    values="count",  # Utiliser le nom correct de la colonne
    title="R√©partition des types de commerces dans l'ensemble des PVD ",
    color="count",  # Optionnel : colorer les rectangles en fonction des valeurs
    color_continuous_scale="Viridis"
)




    # Tendance par ann√©e (cumulative)
    if "date_signature" in df.columns:
        df["year"] = df["date_signature"].dt.year
        df_year_count = df["year"].value_counts().reset_index()
        df_year_count.columns = ["year", "n"]
        df_year_count = df_year_count.sort_values("year")
        df_year_count["cumulative"] = df_year_count["n"].cumsum()
    else:
        df_year_count = pd.DataFrame({"year": [], "cumulative": []})

    fig_trend = go.Figure()
    if not df_year_count.empty:
        fig_trend = px.line(
            df_year_count,
            x="year",
            y="cumulative",
            markers=True,
            title="Croissance du nombre de commerces annuellement"
        )
        fig_trend.update_layout(xaxis_title="Ann√©e", yaxis_title="Effectifs cumul√©s")

    # Top 10 des types (diagramme circulaire)
    df_top_10 = df_type_count.head(10)
    fig_top_10 = go.Figure()

    if not df_top_10.empty:
       fig_top_10 = px.pie(
        df_top_10,
        names="type",
        values="count",  # Utiliser le nom correct de la colonne
        title="Top 10 des types de commerces",
        color="type",
    )



    return fig_treemap, fig_trend, fig_top_10

# ========== 9) Callbacks pour l‚Äôonglet "departements" ======================

@app.callback(
    Output("concentration_dept", "figure"),
    Output("repartition_types_dept", "figure"),
    Input("main-tabs", "value"),
    Input("selected_dept", "value")
)
def update_dept_charts(tab, selected_dept):
    if tab != "departements" or selected_dept is None:
        return go.Figure(), go.Figure()

    df = villa_com[villa_com["Nom Officiel D√©partement"] == selected_dept].copy()
    if df.empty:
        return go.Figure(), go.Figure()

    # 1) concentration_dept
    ## Bar chart empil√© pour plusieurs communes
    df_stacked = df.groupby(["lib_com", "type"]).size().reset_index(name="count")
    fig_stacked = px.bar(
    df_stacked,
    x="lib_com",
    y="count",
    color="type",
    title=f"R√©partition des types de commerces par commune pour le departement de {selected_dept}",
    labels={"lib_com": "Commune", "count": "Nombre de commerces", "type": "Type de commerce"}
)

    # 2) repartition_types_dept (top 10)
    df_dept_count = df["type"].value_counts().reset_index()
    df_dept_count.columns = ["type", "n"]
    df_dept_top10 = df_dept_count.head(10)
    fig_repartition = px.pie(
        df_dept_top10,
        names="type",
        values="n",
        title="R√©partition des 10 principaux types de commerces"
)

    return fig_stacked, fig_repartition

# ========== 12) Callbacks Explorer (cascade R√©gion -> Dept -> Commune) =====

@app.callback(
    Output("explore_dept", "options"),
    Output("explore_dept", "value"),
    Input("explore_region", "value")
)
def update_dept_options(selected_region):
    """ Met √† jour la liste des d√©partements en fonction de la r√©gion choisie. """
    if not selected_region:
        return [], None
    df_region = ville_com[ville_com["Nom Officiel R√©gion"] == selected_region]
    depts = sorted(df_region["Nom Officiel D√©partement"].unique())
    opts = [{"label": d, "value": d} for d in depts]
    val = depts[0] if len(depts) > 0 else None
    return opts, val

@app.callback(
    Output("explore_commune", "options"),
    Output("explore_commune", "value"),
    Input("explore_region", "value"),
    Input("explore_dept", "value")
)
def update_commune_options(selected_region, selected_dept):
    """ Met √† jour la liste des communes en fonction du d√©partement choisi. """
    if not selected_region or not selected_dept:
        return [], None
    df_dept = ville_com[
        (ville_com["Nom Officiel R√©gion"] == selected_region) &
        (ville_com["Nom Officiel D√©partement"] == selected_dept)
    ]
    communes = sorted(df_dept["lib_com"].unique())
    opts = [{"label": c, "value": c} for c in communes]
    val = communes[0] if len(communes) > 0 else None
    return opts, val

@app.callback(
    Output("explore_commerce_distribution", "figure"),
    Output("explore_top_types", "figure"),
    Output("diversity_commune", "figure"),
    Output("explore_map", "figure"),
    Output("explore_category_distribution", "figure"),
    Input("explore_region", "value"),
    Input("explore_dept", "value"),
    Input("explore_commune", "value"),
    Input("main-tabs", "value")
)
def update_explorer_charts(region, dept, commune, tab):
    if tab != "explorer":
        return go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure

    if not commune:
        return go.Figure(), go.Figure(), go.Figure(),go.Figure(), go.Figure

    df = ville_com[
        (ville_com["Nom Officiel R√©gion"] == region) &
        (ville_com["Nom Officiel D√©partement"] == dept) &
        (ville_com["lib_com"] == commune)
    ]
    if df.empty:
        return go.Figure(), go.Figure(), go.Figure(),go.Figure(), go.Figure

    # 1) Distribution (bar chart)
    df_count = df["type"].value_counts().reset_index()
    df_count.columns = ["type", "n"]
    fig_dist = px.bar(
    df_count,
    x="type",    # Les types de commerces
    y="n",       # Le nombre de commerces pour chaque type
    title=f"R√©partition des types de  commerces √† {commune}",
    labels={"type": "Type de commerce", "n": "Nombre de commerces"}
    )
    # 2) Top types (pie chart)
    df_top = df_count.head(10).sort_values("n", ascending=True)
    fig_top = px.pie(
    df_top,
    names="type",  # Les types de commerces
    values="n",    # Le nombre de commerces pour chaque type
    title=f"Top 10 des types de commerces √† {commune}"
    )
    # 3) Map of commerce locations
    fig_map = px.scatter_mapbox(
        df,
        lat="Y",
        lon="X",
        hover_name="name",
        hover_data={"type": True, "address": True},
        color="type",
        zoom=12,
        title=f"Localisation des commerces √† {commune}",
        labels={"type": "Type de commerce"}
    )
    fig_map.update_layout(mapbox_style="open-street-map")

    # 1) Diversit√©
    total_types_commerce = ville_com['type'].nunique()
    types_par_commune = df['type'].nunique()
    diversite_commune = (types_par_commune / total_types_commerce) * 100

    # 1) Diagramme en anneau
    fig_diversite = px.pie(
    values=[diversite_commune, 100 - diversite_commune],
    names=["Diversit√© des commerces", "Manque de diversit√©"],
    color_discrete_sequence=["skyblue", "orange"],
    title=f"Diversit√© des types de commerces √† {commune}"
)
    fig_diversite.update_traces(hole=0.4, textinfo="percent+label")

    # 5) R√©partition Grandes cha√Ænes vs Ind√©pendants
    df["category"] = df["brand"].apply(lambda x: "Grande cha√Æne" if pd.notna(x) else "Commerce ind√©pendant")
    category_counts = df["category"].value_counts(normalize=True)
    fig_category = px.pie(
        values=category_counts.values,
        names=category_counts.index,
        title=f"R√©partition des types commerces : Grandes cha√Ænes vs Ind√©pendants √† {commune}",
        color_discrete_map={"Grande cha√Æne": "yellow", "Commerce ind√©pendant": "purple"}
    )

    return fig_dist.to_dict(), fig_top.to_dict(), fig_diversite.to_dict(), fig_map.to_dict(), fig_category.to_dict()


# ========== 13) Callbacks comparatif communes ==============================
@app.callback(
    Output("commune_comparison_chart", "figure"),
    Output("commune1_wordcloud", "figure"),
    Output("commune2_wordcloud", "figure"),
    Output("commune1_div", "figure"),
    Output("commune2_div", "figure"),
    Output("commune1_chaine", "figure"),
    Output("commune2_chaine", "figure"),
    Input("compare_commune1", "value"),
    Input("compare_commune2", "value"),
    Input("main-tabs", "value")
)
def update_compare_communes_chart(commune1, commune2, tab):
    # V√©rification si l'onglet est incorrect
    if tab != "comparative_communes":
        return go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure()

    # V√©rification si une commune est manquante
    if not commune1 or not commune2:
        return go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure()
    df=ville_com.copy()
    # Fonction utilitaire pour calculer diversit√© et r√©partition des cat√©gories
    def calculate_diversity_and_category(commune_df):
        total_types_commerce = df["type"].nunique()
        types_par_commune = commune_df["type"].nunique()
        diversite_commune = (types_par_commune / total_types_commerce) * 100

        # R√©partition Grandes cha√Ænes vs Ind√©pendants
        commune_df["category"] = commune_df["brand"].apply(
            lambda x: "Grande cha√Æne" if pd.notna(x) else "Commerce ind√©pendant"
        )
        category_counts = commune_df["category"].value_counts(normalize=True)

        return diversite_commune, category_counts

    # Chargement des donn√©es pour chaque commune
    commune1_df = ville_com[ville_com["com_nom"] == commune1]
    commune2_df = df_com[df_com["com_nom"] == commune2]

    # Cr√©ation du bar chart comparatif
    df1 = commune1_df["type"].value_counts().reset_index()
    df1.columns = ["type", "n_commune1"]

    df2 = commune2_df["type"].value_counts().reset_index()
    df2.columns = ["type", "n_commune2"]

    df_merged = pd.merge(df1, df2, on="type", how="outer").fillna(0)

    fig_compare = go.Figure()
    fig_compare.add_bar(x=df_merged["type"], y=df_merged["n_commune1"], name=commune1)
    fig_compare.add_bar(x=df_merged["type"], y=df_merged["n_commune2"], name=commune2)
    fig_compare.update_layout(
        barmode="group",
        title=f"Comparaison des types de commerces entre {commune1} et {commune2}",
        xaxis_title="Type de commerce",
        yaxis_title="Nombre de commerces"
    )

    # Diagrammes circulaires des top 10 types
    fig_c1 = px.pie(
        df1.sort_values("n_commune1", ascending=False).head(10),
        names="type",
        values="n_commune1",
        title=f"Top 10 des commerces dans {commune1}"
    )
    fig_c2 = px.pie(
        df2.sort_values("n_commune2", ascending=False).head(10),
        names="type",
        values="n_commune2",
        title=f"Top 10 des commerces dans {commune2}"
    )

    # Calculs diversit√© et r√©partition pour commune1
    diversite1, category_counts1 = calculate_diversity_and_category(commune1_df)
    fig_div1 = px.pie(
        values=[diversite1, 100 - diversite1],
        names=["Diversit√© des commerces", "Manque de diversit√©"],
        color_discrete_sequence=["skyblue", "orange"],
        title=f"Diversit√© des types de commerces √† {commune1}"
    )
    fig_div1.update_traces(hole=0.4, textinfo="percent+label")

    fig_cat1 = px.pie(
        values=category_counts1.values,
        names=category_counts1.index,
        title=f"Grandes cha√Ænes vs Ind√©pendants √† {commune1}",
        color_discrete_map={"Grande cha√Æne": "yellow", "Commerce ind√©pendant": "purple"}
    )

    # Calculs diversit√© et r√©partition pour commune2
    diversite2, category_counts2 = calculate_diversity_and_category(commune2_df)
    fig_div2 = px.pie(
        values=[diversite2, 100 - diversite2],
        names=["Diversit√© des commerces", "Manque de diversit√©"],
        color_discrete_sequence=["skyblue", "orange"],
        title=f"Diversit√© des types de commerces √† {commune2}"
    )
    fig_div2.update_traces(hole=0.4, textinfo="percent+label")

    fig_cat2 = px.pie(
        values=category_counts2.values,
        names=category_counts2.index,
        title=f"Grandes cha√Ænes vs Ind√©pendants √† {commune2}",
        color_discrete_map={"Grande cha√Æne": "yellow", "Commerce ind√©pendant": "purple"}
    )

    # Retour des figures pour tous les graphes
    return (
        fig_compare.to_dict(),  # Comparaison
        fig_c1.to_dict(),      # Wordcloud commune1
        fig_c2.to_dict(),      # Wordcloud commune2
        fig_div1.to_dict(),    # Diversit√© commune1
        fig_div2.to_dict(),    # Diversit√© commune2
        fig_cat1.to_dict(),    # Grandes cha√Ænes vs Ind√©pendants commune1
        fig_cat2.to_dict()     # Grandes cha√Ænes vs Ind√©pendants commune2
    )